name: ci-cd

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

jobs:

  ci:
    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      # Set up job requirements
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Check-out repository
      uses: actions/checkout@v4
    - name: Install poetry
      uses: snok/install-poetry@v1
    - name: Install package
      run: poetry install

      # Format code and error on issues. This is an easy check to pass.
    - uses: psf/black@stable
      with:
        jupyter: true
        src: ./src
    - uses: psf/black@stable
      with:
        jupyter: true
        src: ./tests

      # Analyze code but don't error on issues. This check encourages best
      # practices and offers flexibility in adoption.
    - name: Install poetry
      uses: snok/install-poetry@v1
    - name: Install package
      run: poetry install
    - name: Analyze code with pylint
      run: |
        poetry run pylint src/ --exit-zero
        poetry run pylint tests/ --exit-zero

      # Test
    - name: Test with pytest
      run: poetry run pytest tests/ --cov=gbif_registrar --cov-report=xml
    - name: Use Codecov to track coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml   # coverage report

      # Build docs
    - name: Build documentation
      run: poetry run make html --directory docs/

  cd:
    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Check-out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: RELEASE_TOKEN

    - name: Install poetry
      uses: snok/install-poetry@v1

    - name: Install package
      run: poetry install

    - name: Use Python Semantic Release to prepare release
      run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release publish
          git checkout development
          git merge main
          git push origin development

#       - name: Publish to TestPyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           user: __token__
#           password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#           repository_url: https://test.pypi.org/legacy/

#       - name: Test install from TestPyPI
#         run: |
#             pip install \
#             --index-url https://test.pypi.org/simple/ \
#             --extra-index-url https://pypi.org/simple \
#             {{ cookiecutter.__package_slug }}

#       - name: Publish to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           user: __token__
#           password: ${{ secrets.PYPI_API_TOKEN }}